#!/bin/sh

if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$NAME
    VER=$VERSION_ID
elif type lsb_release >/dev/null 2>&1; then
    OS=$(lsb_release -si)
    VER=$(lsb_release -sr)
elif [ -f /etc/lsb-release ]; then
    . /etc/lsb-release
    OS=$DISTRIB_ID
    VER=$DISTRIB_RELEASE
elif [ -f /usr/lib/os-release ]; then
    . /usr/lib/os-release
    OS=$NAME
    VER=$VERSION_ID
else
    OS=$(uname -s)
    VER=$(uname -r)
fi

echo "Distro: $OS"

echo "[/]
sources=[('xkb', 'us')]
xkb-options=['compose:ralt', 'terminate:ctrl_alt_bksp', 'caps:escape_shifted_capslock']" | dconf load /org/gnome/desktop/input-sources/
echo "[/]
click-method='fingers'
tap-to-click=false
two-finger-scrolling-enabled=true" | dconf load /org/gnome/desktop/pheripherals/touchpad/
echo "[/]
close=['<Shift><Super>q']" | dconf load /org/gnome/desktop/wm/keybindings/
echo "[/]
button-layout='appmenu:minimize,maximize,close'
resize-with-right-button=true" | dconf load /org/gnome/desktop/wm/preferences/
echo "[/]
night-light-enabled=true
night-light-temperature=uint32 3981" | dconf load /org/gnome/settings-daemon/plugins/color/
echo "[/]
center-new-windows=true" | dconf load /org/gnome/mutter/
echo "[/]
default-zoom-level='small'
use-tree-view=true" | dconf load /org/gnome/nautilus/list-view/
echo "[/]
default-folder-viewer='list-view'
search-filter-time-type='last_modified'
search-view='list-view'
show-create-link=true
show-delete-permanently=true" | dconf load /org/gnome/nautilus/preferences/
echo "[/]
clock-show-date=true
clock-show-seconds=true
clock-show-weekday=true
enable-hot-corners=true
gtk-im-module='gtk-im-context-simple'
show-battery-percentage=true
text-scaling-factor=1.0" | dconf load /org/gnome/desktop/interface/
echo "[/]
show-extensions-notice=false" | dconf load /org/gnome/tweaks/
echo "[/]
sleep-inactive-ac-timeout=3600
sleep-inactive-ac-type='nothing'" | dconf load /org/gnome/settings-daemon/plugins/power


if [ "$(gnome-shell --version | cut -d' ' -f3 | cut -d'.' -f1)" -lt 40 ]; then
	echo "[/]
	terminal=['<Super>Return']" | dconf load /org/gnome/settings-daemon/plugins/media-keys/
else
	echo "[/]
	custom-keybindings=['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/']

	[custom-keybindings/custom0]
	binding='<Super>Return'
	command='gnome-terminal'
	name='Terminal'" | dconf load /org/gnome/settings-daemon/plugins/media-keys/
fi

dir=$(cd -- "$(dirname -- "$0")" && pwd)
cd "$dir" || exit

stty -echo
printf "Password: "
read -r PASSWORD
stty echo
printf "\n"

if [ "$OS" = "Ubuntu" ]; then
	echo "$PASSWORD" | sudo -S snap remove snap-store
	echo "$PASSWORD" | sudo -S add-apt-repository -y ppa:neovim-ppa/unstable
	echo "$PASSWORD" | sudo -S apt update
	echo "$PASSWORD" | sudo -S apt install -y curl wget

	if [ "$(echo "$VER" | cut -d'.' -f1)" -lt 21 ]; then
		# Add Podman repo
		. /etc/os-release
		echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
		curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key" | sudo apt-key add -
		echo "$PASSWORD" | sudo -S apt install -y tlp
		echo "$PASSWORD" | sudo -S systemctl enable --now tlp
	else
		echo "$PASSWORD" | sudo -S apt install -y power-profiles-daemon
	fi

	wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
	echo "$PASSWORD" | sudo -S install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
	echo "$PASSWORD" | sudo -S sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
	rm -f packages.microsoft.gpg

	echo "$PASSWORD" | sudo -S apt update
	echo "$PASSWORD" | sudo -S apt upgrade -y
	echo "$PASSWORD" | sudo -S DEBIAN_FRONTEND=noninteractive apt install -y \
		git \
		zsh \
		aria2 \
		ranger \
		xclip \
		htop \
		python3-pip \
		newsboat \
		r-base \
		fzf \
		ripgrep \
		stow \
		tmux \
		tmuxinator \
		tmux-plugin-manager \
		tree \
		mlocate \
		mpv \
		firefox \
		timeshift \
		transmission \
		deja-dup \
		rhythmbox \
		thunderbird \
		shotwell \
		gnome-tweaks \
		virt-manager \
		firewalld \
		firewall-config \
		flatpak \
		syncthing \
		podman \
		ubuntu-restricted-extras \
		neovim \
		code

elif [ "$OS" = "Arch Linux" ]; then
	echo "$PASSWORD" | sudo -S sed -i '/VerbosePkgLists/s/^#//g' /etc/pacman.conf
	echo "$PASSWORD" | sudo -S sed -i '/Color/s/^#//g' /etc/pacman.conf
	echo "$PASSWORD" | sudo -S sed -i '/ParallelDownloads/c\ParallelDownloads = 5' /etc/pacman.conf

	echo "$PASSWORD" | sudo -S pacman -Syu --noconfirm --needed \
		git \
		curl \
		zsh \
		aria2 \
		ranger \
		htop \
		python-pip \
		newsboat \
		r \
		fzf \
		ripgrep \
		stow \
		tmux \
		tree \
		mlocate \
		mpv \
		firefox \
		transmission-gtk \
		deja-dup \
		rhythmbox \
		thunderbird \
		shotwell \
		gnome-tweaks \
		virt-manager \
		podman \
		toolbox \
		telegram-desktop \
		base-devel \
		wl-clipboard \
		firewalld \
		syncthing \
		chromium \
		discord \
		sof-firmware \ # required for ThinkPad T14 audio
		util-linux \
		neovim

	git clone https://aur.archlinux.org/paru.git
	cd paru || exit
	#TODO: makepkg needs sudo
	makepkg -si
	rm -rf paru

	echo "$PASSWORD" | sudo -S paru -S --noconfirm \
		spotify \
		power-profiles-daemon \
		visual-studio-code-bin

elif [ "$OS" = "Fedora" ]; then
	echo "$PASSWORD" | sudo -S dnf install -y \
		"https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm"
	echo "$PASSWORD" | sudo -S dnf install -y \
		"https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"

	echo "$PASSWORD" | sudo -S rpm --import https://packages.microsoft.com/keys/microsoft.asc
	echo "$PASSWORD" | sudo -S sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

	echo "$PASSWORD" | sudo -S dnf update -y
	echo "$PASSWORD" | sudo -S dnf install -y \
		git \
		curl \
		zsh \
		aria2 \
		ranger \
		xclip \
		htop \
		util-linux-user \
		python3-pip \
		newsboat \
		R \
		fzf \
		ripgrep \
		stow \
		tmux \
		tree \
		mlocate \
		mpv \
		firefox \
		timeshift \
		transmission \
		deja-dup \
		rhythmbox \
		thunderbird \
		shotwell \
		gnome-tweaks \
		virt-manager \
		podman \
		toolbox \
		flatpak \
		syncthing \
		chromium \
		neovim \
		wl-clipboard \
		firewall-config \
		dnf-utils \
		dnf-plugin-tracer \
		power-profiles-daemon \
		policycoreutils-sandbox \
		code \
		conda \
		unrar \
		gstreamer1-plugins-bad-free \
		gstreamer1-plugins-bad-free-extras \
		gstreamer1-plugins-good \
		gstreamer1-plugins-good-extras \
		gstreamer1-plugins-good-gtk \
		gstreamer1-plugins-good-qt \
		gstreamer1-plugins-base \
		gstreamer1-plugin-openh264 \
		gstreamer1-libav \
		lame
else
	printf "\nDistro not supported.\n"
fi

echo "$PASSWORD" | sudo -S systemctl enable --now firewalld
echo "$PASSWORD" | sudo -S systemctl enable fstrim.timer
echo "$PASSWORD" | sudo -S systemctl disable --now bluetooth
echo "$PASSWORD" | sudo -S usermod -aG libvirt "$USER"
echo "$PASSWORD" | sudo -S usermod -aG kvm "$USER"
echo "SUBSYSTEM==\"usb\", ACTION==\"add\", ENV{ID_MODEL}==\"iPhone\", RUN+=\"/usr/bin/env sh -c 'echo Fast > /sys/class/power_supply/apple_mfi_fastcharge/charge_type'\"" | sudo tee /etc/udev/rules.d/99-ios-fastcharge.rules.j2

pip3 install youtube-dl pynvim --user

if ! [ "$OS" = "Arch Linux" ]; then
	echo "$PASSWORD" | sudo -S flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
	flatpak install -y flathub com.spotify.Client
	flatpak install -y flathub org.telegram.desktop
	flatpak install -y flathub com.discordapp.Discord
	flatpak install -y flathub com.github.tchx84.Flatseal
fi

echo "$PASSWORD" | sudo -S chsh -s "$(command -v zsh)" "$USER"
export CHSH=no
export RUNZSH=no
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions"
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting"

mkdir -p "$HOME/.local/share/fonts"
aria2c https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/SourceCodePro/Regular/complete/Sauce%20Code%20Pro%20Nerd%20Font%20Complete%20Mono.ttf -d "$HOME/.local/share/fonts"
aria2c https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/UbuntuMono/Regular/complete/Ubuntu%20Mono%20Nerd%20Font%20Complete%20Mono.ttf -d "$HOME/.local/share/fonts"
aria2c https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/FiraMono/Regular/complete/Fira%20Mono%20Regular%20Nerd%20Font%20Complete%20Mono.otf -d "$HOME/.local/share/fonts"

if [ -f "$HOME/.ssh/id_ed25519" ]; then
	git clone git@github.com:francesconicoletta/dotfiles.git "$HOME/.dotfiles"
else
	printf "\nssh key not present.\n"
	git clone https://github.com/francesconicoletta/dotfiles.git "$HOME/.dotfiles"
fi

rm "$HOME/.zshrc"
rm "$HOME/.zshenv"
cd "$HOME/.dotfiles" || exit
make stow

# FZF
grep -v "source /usr/share/doc/fzf/examples/key-bindings.zsh" "$HOME/.zshrc" > "$HOME/.zshrc-old"; mv "$HOME/.zshrc-old" "$HOME/.zshrc"
grep -v "source /usr/share/doc/fzf/examples/completion.zsh" "$HOME/.zshrc" > "$HOME/.zshrc-old"; mv "$HOME/.zshrc-old" "$HOME/.zshrc"
grep -v "source /usr/share/fzf/shell/key-bindings.zsh" "$HOME/.zshrc" > "$HOME/.zshrc-old"; mv "$HOME/.zshrc-old" "$HOME/.zshrc"
grep -v "source /usr/share/fzf/key-bindings.zsh" "$HOME/.zshrc" > "$HOME/.zshrc-old"; mv "$HOME/.zshrc-old" "$HOME/.zshrc"
grep -v "source /usr/share/fzf/completion.zsh" "$HOME/.zshrc" > "$HOME/.zshrc-old"; mv "$HOME/.zshrc-old" "$HOME/.zshrc"

if [ "$OS" = "Ubuntu" ]; then
	echo "source /usr/share/doc/fzf/examples/key-bindings.zsh" | tee -a "$HOME/.zshrc"
	echo "source /usr/share/doc/fzf/examples/completion.zsh" | tee -a "$HOME/.zshrc"
elif [ "$OS" = "Fedora" ]; then
	echo "source /usr/share/fzf/shell/key-bindings.zsh" | tee -a "$HOME/.zshrc"
elif [ "$OS" = "Arch Linux" ]; then
	echo "source /usr/share/fzf/key-bindings.zsh" | tee -a "$HOME/.zshrc"
	echo "source /usr/share/fzf/completion.zsh" | tee -a "$HOME/.zshrc"
fi

git config --global user.email "francesconico86@gmail.com"
git config --global user.name "Francesco Nicoletta Puzzillo"

nvim
